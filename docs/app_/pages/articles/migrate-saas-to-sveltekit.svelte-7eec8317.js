import{S as Ii,i as Si,s as _i,k as h,e as i,t as o,L as Ei,d as t,m as f,c as s,a as r,h as l,f as H,b as m,M as _a,g as d,J as a,K as Ea}from"../../chunks/vendor-ba5e527f.js";import{a as me}from"../../chunks/paths-396f020f.js";function Ki(gi){let M,E,ue,rt,xe,g,nt,O,dt,ht,Le,I,ft,C,mt,ut,je,S,pt,z,ct,wt,Re,K,B,vt,yt,Te,N,bt,He,F,kt,Me,w,gt,pe,It,St,ce,_t,Et,Oe,D,Kt,Ce,A,J,P,Ka,ze,G,At,Be,x,U,L,Aa,Ne,q,Pt,Fe,W,xt,De,X,Lt,Je,j,Q,R,Pa,Ge,V,jt,Ue,v,Rt,we,Tt,Ht,ve,Mt,Ot,qe,Y,Ct,We,Z,zt,Xe,$,Bt,Qe,ee,Nt,Ve,p,ye,Ft,Dt,be,Jt,Gt,b,Ut,ke,qt,Wt,te,Xt,Qt,Vt,ge,Yt,Zt,T,$t,Ie,ea,ta,Ye,ae,aa,Ze,u,Se,ia,oa,_e,sa,la,Ee,ra,na,Ke,da,ha,Ae,fa,ma,k,ua,ie,pa,ca,Pe,oe,wa,va,$e,se,ya,et,le,ba,tt,_,ka,re,ga,Ia;return{c(){M=h(),E=i("header"),ue=i("h1"),rt=o("Reflections on Migrating my SaaS To SvelteKit"),xe=h(),g=i("p"),nt=o("I run "),O=i("a"),dt=o("ExtensionPay"),ht=o(", a service to monetize Chrome extensions by letting developers easily add payments to their extensions."),Le=h(),I=i("p"),ft=o("Because I seriously enjoy working with "),C=i("a"),mt=o("Svelte"),ut=o(", I built ExtensionPay on top of a custom framework based around Svelte that would take care of all the server-side rendering, server/client communication, code-splitting, file minimizing, stylesheets, etc."),je=h(),S=i("p"),pt=o("The framework was pretty nice for something I cobbled together, but had issues. One big one was startup time. My service would go down for way too long after restarting the app. Another issue was imports. It was difficult or impossible to import libraries client-side so I had to do annoying workarounds and that made me want to work on the code less. A custom framework can also be a businesses liability. So when "),z=i("a"),ct=o("SvelteKit 1.0 was announced"),wt=o(" I really wanted to switch over."),Re=h(),K=i("p"),B=i("a"),vt=o("SvelteKit"),yt=o(" is the framework I\u2019ve dreamed about since I started full stack development in 2010. It not only takes care of all the nitty gritty details of code-splitting, stylesheets, minimization, caching, client-side code, server-side code, server-side rendering, client-side hydration, CSRF, performance, etc, but is basically boilerplate-free. SvelteKit is apparently a lot like Next or Nuxt, but built on top of Svelte so it's blazing fast and a delight to work with."),Te=h(),N=i("p"),bt=o("Working very slowly, it took me a few months to migrate ExtensionPay from my old custom framework to SvelteKit by hand. I deployed the new version on April 2, 2023. Here are some results."),He=h(),F=i("h2"),kt=o("Lines of code"),Me=h(),w=i("p"),gt=o("Here\u2019s a count of the lines of code in my "),pe=i("code"),It=o("routes/"),St=o(" directory using "),ce=i("code"),_t=o("cloc"),Et=o("."),Oe=h(),D=i("p"),Kt=o("Before (my custom framework):"),Ce=h(),A=i("figure"),J=i("a"),P=i("img"),ze=h(),G=i("p"),At=o("After (SvelteKit):"),Be=h(),x=i("figure"),U=i("a"),L=i("img"),Ne=h(),q=i("p"),Pt=o("Around 600 lines removed after the migration. That\u2019s about a 12% reduction in code. My framework was already pretty lean so that's impressive."),Fe=h(),W=i("p"),xt=o("Some of the code reduction was because there was a little duplicate code between pages, but most of it was just because SvelteKit removed the need for a lot of code. This is really great. As a solo founder, fewer lines of code to maintain and understand is a huge help."),De=h(),X=i("h2"),Lt=o("Performance"),Je=h(),j=i("figure"),Q=i("a"),R=i("img"),Ge=h(),V=i("p"),jt=o("I launched the SvelteKit-based app near that black line on the plot. It\u2019s a little hard to see with the spikes, but the overall performance of the SvelteKit-based app is a tiny bit worse. Before, the midday usage would pretty consistently top out around 20% CPU. Now midday usage is typically around 30%. Not a big deal, but will probably mean I need to upgrade the server sooner. So the SvelteKit team owes me some money \u{1F61B} jk"),Ue=h(),v=i("p"),Rt=o("I was actually concerned the performance would be much worse. In my local load testing with the "),we=i("code"),Tt=o("ab"),Ht=o(" command-line utility the SvelteKit app had about "),ve=i("em"),Mt=o("half"),Ot=o(" the performance of my previous app for basic routes. Luckily in practice that didn\u2019t happen. Maybe my test was flawed."),qe=h(),Y=i("h2"),Ct=o("Feelings"),We=h(),Z=i("p"),zt=o("Overall, the migration and deploy went fairly smoothly. It was a lot of work to basically rewrite the app and make sure everything still worked, but I\u2019m happy I did it."),Xe=h(),$=i("p"),Bt=o("Having switched over, I feel like my app is on a lot more solid foundation with SvelteKit. I feel fantastic developing with the framework and my app feels fantastic to use."),Qe=h(),ee=i("p"),Nt=o("A few pain points I ran into working with SvelteKit:"),Ve=h(),p=i("ul"),ye=i("li"),Ft=o("It was surprisingly difficult to get a REPL working nicely with SvelteKit. For business reasons I often have the need to run custom one-off commands in a REPL or script, but because of various import issues, creating a REPL that knew about my app and database was a challenge. I eventually got it to work, but it wasn\u2019t easy."),Dt=h(),be=i("li"),Jt=o("Related to the above, SvelteKit is pretty new so there\u2019s not a lot about it on the internet yet. When I run into issues, there\u2019s less material I can search for that might have fixes. Luckily there was enough and the SvelteKit team was actually crazy responsive to bugs or forum posts I made, and this problem will diminish over time."),Gt=h(),b=i("li"),Ut=o("One small but annoying issue is that when I load 3rd-party libraries in the "),ke=i("code"),qt=o("<head>"),Wt=o(" of a SvelteKit route over http(s), the script loads in a blocking way when rendered from the server and in a non-blocking way when rendered via client-side navigation. This caused my code to fail during client-side navigation but not server-side navigation and it\u2019s only through luck that I caught the failure before launch. "),te=i("a"),Xt=o("I made an issue about this"),Qt=o(" that was closed as \u201Cwell that\u2019s just how it works\u201D and a nice suggestion about how I might achieve my goals instead. Still, It was kind of tricky to figure out how to make a workaround that worked in all cases."),Vt=h(),ge=i("li"),Yt=o("As demonstrated earlier, real-world performance is a little worse than my previous custom framework. I\u2019m not sure why this is. Maybe it's SvelteKit or maybe it's something I'm doing. Either way, it\u2019s not so bad."),Zt=h(),T=i("li"),$t=o("The naming conventions for routes is a little bonkers. Now when I\u2019m working on my app I have like 10 tabs open that all have the name "),Ie=i("code"),ea=o("+page.server.ts"),ta=o(". \u{1F644} Does anyone know how I can make this better in vim?"),Ye=h(),ae=i("p"),aa=o("Some pleasures of working with SvelteKit:"),Ze=h(),u=i("ul"),Se=i("li"),ia=o("The developer experience is phenomenal. Hot reloading is so much nicer than what I was using previously and all the built-in commands for testing work great."),oa=h(),_e=i("li"),sa=o("I\u2019m really happy that SvelteKit allows parts of your app to be pre-rendered and others to be dynamic. I now pre-render my marketing pages (like this post!) which is great for performance. And the client-side routing also still works."),la=h(),Ee=i("li"),ra=o("Speaking of which, the client-side routing was a real unexpected pleasure. I assumed it was just extraneous, but it really does make my app feel a lot snappier and it\u2019s just included automatically in SvelteKit without me having to do anything."),na=h(),Ke=i("li"),da=o("Another unexpected pleasure was using TypeScript for static types and Playwright for end-to-end testing. Both give me an extra layer of confidence that my app is working as intended which is so important as a solo developer. Heck, I didn't set out to use Typescript or Playwright at all, but SvelteKit made them so easy to add that I just did it . And I'm so glad I did because I feel a lot more confident deploying code now."),ha=h(),Ae=i("li"),fa=o("SvelteKit\u2019s documentation is already quite good, and I know the team is also working on an interactive tutorial which is great. Good reference documentation is so helpful."),ma=h(),k=i("li"),ua=o("I really love how forms work in SvelteKit. For whatever reason, working with forms in any other framework always felt so tedious to me. But the "),ie=i("a"),pa=o("form actions API"),ca=o(" means it\u2019s so easy to make boilerlate-free forms that work without client-side JavaScript but can be easily upgraded to AJAX with basically no extra code using "),Pe=i("code"),oe=i("a"),wa=o("enhance"),va=o(". Before the migration, I was getting a surprising number of error notification emails about people submitting forms on my site that didn\u2019t have JavaScript enabled. Now I get none, and all my forms work work with and without client-side JavaScript by default. And I actually enjoy creating them."),$e=h(),se=i("p"),ya=o("Having my app on SvelteKit also comes with some other potential benefits. If I ever want to bring in another developer, it will be much easier to get them up to speed with SvelteKit than my own custom framework. And for the same reason, if I ever want to sell my app I imagine it will be an easier sell that it\u2019s built on something well-supported and documented. Of course, this would be true for any well-known framework, but as I mentioned earlier I really love Svelte and dislike React so for me it\u2019s an easy choice."),et=h(),le=i("p"),ba=o("Overall, I\u2019m really happy with SvelteKit and want to extend my sincere thanks for the SvelteKit team for working so hard on it, taking our feedback, and sharing it with us for free. It really is amazing."),tt=h(),_=i("p"),ka=o("I love it so much, in fact, that I'm taking what I've learned in my own app and developing a "),re=i("a"),ga=o("SvelteKit SaaS starter template"),Ia=o("."),this.h()},l(e){Ei('[data-svelte="svelte-ghkt6g"]',document.head).forEach(t),M=f(e),E=s(e,"HEADER",{style:!0});var xa=r(E);ue=s(xa,"H1",{});var La=r(ue);rt=l(La,"Reflections on Migrating my SaaS To SvelteKit"),La.forEach(t),xa.forEach(t),xe=f(e),g=s(e,"P",{});var at=r(g);nt=l(at,"I run "),O=s(at,"A",{href:!0});var ja=r(O);dt=l(ja,"ExtensionPay"),ja.forEach(t),ht=l(at,", a service to monetize Chrome extensions by letting developers easily add payments to their extensions."),at.forEach(t),Le=f(e),I=s(e,"P",{});var it=r(I);ft=l(it,"Because I seriously enjoy working with "),C=s(it,"A",{href:!0});var Ra=r(C);mt=l(Ra,"Svelte"),Ra.forEach(t),ut=l(it,", I built ExtensionPay on top of a custom framework based around Svelte that would take care of all the server-side rendering, server/client communication, code-splitting, file minimizing, stylesheets, etc."),it.forEach(t),je=f(e),S=s(e,"P",{});var ot=r(S);pt=l(ot,"The framework was pretty nice for something I cobbled together, but had issues. One big one was startup time. My service would go down for way too long after restarting the app. Another issue was imports. It was difficult or impossible to import libraries client-side so I had to do annoying workarounds and that made me want to work on the code less. A custom framework can also be a businesses liability. So when "),z=s(ot,"A",{href:!0});var Ta=r(z);ct=l(Ta,"SvelteKit 1.0 was announced"),Ta.forEach(t),wt=l(ot," I really wanted to switch over."),ot.forEach(t),Re=f(e),K=s(e,"P",{});var Sa=r(K);B=s(Sa,"A",{href:!0});var Ha=r(B);vt=l(Ha,"SvelteKit"),Ha.forEach(t),yt=l(Sa," is the framework I\u2019ve dreamed about since I started full stack development in 2010. It not only takes care of all the nitty gritty details of code-splitting, stylesheets, minimization, caching, client-side code, server-side code, server-side rendering, client-side hydration, CSRF, performance, etc, but is basically boilerplate-free. SvelteKit is apparently a lot like Next or Nuxt, but built on top of Svelte so it's blazing fast and a delight to work with."),Sa.forEach(t),Te=f(e),N=s(e,"P",{});var Ma=r(N);bt=l(Ma,"Working very slowly, it took me a few months to migrate ExtensionPay from my old custom framework to SvelteKit by hand. I deployed the new version on April 2, 2023. Here are some results."),Ma.forEach(t),He=f(e),F=s(e,"H2",{});var Oa=r(F);kt=l(Oa,"Lines of code"),Oa.forEach(t),Me=f(e),w=s(e,"P",{});var ne=r(w);gt=l(ne,"Here\u2019s a count of the lines of code in my "),pe=s(ne,"CODE",{});var Ca=r(pe);It=l(Ca,"routes/"),Ca.forEach(t),St=l(ne," directory using "),ce=s(ne,"CODE",{});var za=r(ce);_t=l(za,"cloc"),za.forEach(t),Et=l(ne,"."),ne.forEach(t),Oe=f(e),D=s(e,"P",{});var Ba=r(D);Kt=l(Ba,"Before (my custom framework):"),Ba.forEach(t),Ce=f(e),A=s(e,"FIGURE",{style:!0});var Na=r(A);J=s(Na,"A",{href:!0});var Fa=r(J);P=s(Fa,"IMG",{style:!0,src:!0,alt:!0}),Fa.forEach(t),Na.forEach(t),ze=f(e),G=s(e,"P",{});var Da=r(G);At=l(Da,"After (SvelteKit):"),Da.forEach(t),Be=f(e),x=s(e,"FIGURE",{style:!0});var Ja=r(x);U=s(Ja,"A",{href:!0});var Ga=r(U);L=s(Ga,"IMG",{style:!0,src:!0,alt:!0}),Ga.forEach(t),Ja.forEach(t),Ne=f(e),q=s(e,"P",{});var Ua=r(q);Pt=l(Ua,"Around 600 lines removed after the migration. That\u2019s about a 12% reduction in code. My framework was already pretty lean so that's impressive."),Ua.forEach(t),Fe=f(e),W=s(e,"P",{});var qa=r(W);xt=l(qa,"Some of the code reduction was because there was a little duplicate code between pages, but most of it was just because SvelteKit removed the need for a lot of code. This is really great. As a solo founder, fewer lines of code to maintain and understand is a huge help."),qa.forEach(t),De=f(e),X=s(e,"H2",{});var Wa=r(X);Lt=l(Wa,"Performance"),Wa.forEach(t),Je=f(e),j=s(e,"FIGURE",{style:!0});var Xa=r(j);Q=s(Xa,"A",{href:!0});var Qa=r(Q);R=s(Qa,"IMG",{src:!0,style:!0,alt:!0}),Qa.forEach(t),Xa.forEach(t),Ge=f(e),V=s(e,"P",{});var Va=r(V);jt=l(Va,"I launched the SvelteKit-based app near that black line on the plot. It\u2019s a little hard to see with the spikes, but the overall performance of the SvelteKit-based app is a tiny bit worse. Before, the midday usage would pretty consistently top out around 20% CPU. Now midday usage is typically around 30%. Not a big deal, but will probably mean I need to upgrade the server sooner. So the SvelteKit team owes me some money \u{1F61B} jk"),Va.forEach(t),Ue=f(e),v=s(e,"P",{});var de=r(v);Rt=l(de,"I was actually concerned the performance would be much worse. In my local load testing with the "),we=s(de,"CODE",{});var Ya=r(we);Tt=l(Ya,"ab"),Ya.forEach(t),Ht=l(de," command-line utility the SvelteKit app had about "),ve=s(de,"EM",{});var Za=r(ve);Mt=l(Za,"half"),Za.forEach(t),Ot=l(de," the performance of my previous app for basic routes. Luckily in practice that didn\u2019t happen. Maybe my test was flawed."),de.forEach(t),qe=f(e),Y=s(e,"H2",{});var $a=r(Y);Ct=l($a,"Feelings"),$a.forEach(t),We=f(e),Z=s(e,"P",{});var ei=r(Z);zt=l(ei,"Overall, the migration and deploy went fairly smoothly. It was a lot of work to basically rewrite the app and make sure everything still worked, but I\u2019m happy I did it."),ei.forEach(t),Xe=f(e),$=s(e,"P",{});var ti=r($);Bt=l(ti,"Having switched over, I feel like my app is on a lot more solid foundation with SvelteKit. I feel fantastic developing with the framework and my app feels fantastic to use."),ti.forEach(t),Qe=f(e),ee=s(e,"P",{});var ai=r(ee);Nt=l(ai,"A few pain points I ran into working with SvelteKit:"),ai.forEach(t),Ve=f(e),p=s(e,"UL",{});var y=r(p);ye=s(y,"LI",{});var ii=r(ye);Ft=l(ii,"It was surprisingly difficult to get a REPL working nicely with SvelteKit. For business reasons I often have the need to run custom one-off commands in a REPL or script, but because of various import issues, creating a REPL that knew about my app and database was a challenge. I eventually got it to work, but it wasn\u2019t easy."),ii.forEach(t),Dt=f(y),be=s(y,"LI",{});var oi=r(be);Jt=l(oi,"Related to the above, SvelteKit is pretty new so there\u2019s not a lot about it on the internet yet. When I run into issues, there\u2019s less material I can search for that might have fixes. Luckily there was enough and the SvelteKit team was actually crazy responsive to bugs or forum posts I made, and this problem will diminish over time."),oi.forEach(t),Gt=f(y),b=s(y,"LI",{});var he=r(b);Ut=l(he,"One small but annoying issue is that when I load 3rd-party libraries in the "),ke=s(he,"CODE",{});var si=r(ke);qt=l(si,"<head>"),si.forEach(t),Wt=l(he," of a SvelteKit route over http(s), the script loads in a blocking way when rendered from the server and in a non-blocking way when rendered via client-side navigation. This caused my code to fail during client-side navigation but not server-side navigation and it\u2019s only through luck that I caught the failure before launch. "),te=s(he,"A",{href:!0});var li=r(te);Xt=l(li,"I made an issue about this"),li.forEach(t),Qt=l(he," that was closed as \u201Cwell that\u2019s just how it works\u201D and a nice suggestion about how I might achieve my goals instead. Still, It was kind of tricky to figure out how to make a workaround that worked in all cases."),he.forEach(t),Vt=f(y),ge=s(y,"LI",{});var ri=r(ge);Yt=l(ri,"As demonstrated earlier, real-world performance is a little worse than my previous custom framework. I\u2019m not sure why this is. Maybe it's SvelteKit or maybe it's something I'm doing. Either way, it\u2019s not so bad."),ri.forEach(t),Zt=f(y),T=s(y,"LI",{});var st=r(T);$t=l(st,"The naming conventions for routes is a little bonkers. Now when I\u2019m working on my app I have like 10 tabs open that all have the name "),Ie=s(st,"CODE",{});var ni=r(Ie);ea=l(ni,"+page.server.ts"),ni.forEach(t),ta=l(st,". \u{1F644} Does anyone know how I can make this better in vim?"),st.forEach(t),y.forEach(t),Ye=f(e),ae=s(e,"P",{});var di=r(ae);aa=l(di,"Some pleasures of working with SvelteKit:"),di.forEach(t),Ze=f(e),u=s(e,"UL",{});var c=r(u);Se=s(c,"LI",{});var hi=r(Se);ia=l(hi,"The developer experience is phenomenal. Hot reloading is so much nicer than what I was using previously and all the built-in commands for testing work great."),hi.forEach(t),oa=f(c),_e=s(c,"LI",{});var fi=r(_e);sa=l(fi,"I\u2019m really happy that SvelteKit allows parts of your app to be pre-rendered and others to be dynamic. I now pre-render my marketing pages (like this post!) which is great for performance. And the client-side routing also still works."),fi.forEach(t),la=f(c),Ee=s(c,"LI",{});var mi=r(Ee);ra=l(mi,"Speaking of which, the client-side routing was a real unexpected pleasure. I assumed it was just extraneous, but it really does make my app feel a lot snappier and it\u2019s just included automatically in SvelteKit without me having to do anything."),mi.forEach(t),na=f(c),Ke=s(c,"LI",{});var ui=r(Ke);da=l(ui,"Another unexpected pleasure was using TypeScript for static types and Playwright for end-to-end testing. Both give me an extra layer of confidence that my app is working as intended which is so important as a solo developer. Heck, I didn't set out to use Typescript or Playwright at all, but SvelteKit made them so easy to add that I just did it . And I'm so glad I did because I feel a lot more confident deploying code now."),ui.forEach(t),ha=f(c),Ae=s(c,"LI",{});var pi=r(Ae);fa=l(pi,"SvelteKit\u2019s documentation is already quite good, and I know the team is also working on an interactive tutorial which is great. Good reference documentation is so helpful."),pi.forEach(t),ma=f(c),k=s(c,"LI",{});var fe=r(k);ua=l(fe,"I really love how forms work in SvelteKit. For whatever reason, working with forms in any other framework always felt so tedious to me. But the "),ie=s(fe,"A",{href:!0});var ci=r(ie);pa=l(ci,"form actions API"),ci.forEach(t),ca=l(fe," means it\u2019s so easy to make boilerlate-free forms that work without client-side JavaScript but can be easily upgraded to AJAX with basically no extra code using "),Pe=s(fe,"CODE",{});var wi=r(Pe);oe=s(wi,"A",{href:!0});var vi=r(oe);wa=l(vi,"enhance"),vi.forEach(t),wi.forEach(t),va=l(fe,". Before the migration, I was getting a surprising number of error notification emails about people submitting forms on my site that didn\u2019t have JavaScript enabled. Now I get none, and all my forms work work with and without client-side JavaScript by default. And I actually enjoy creating them."),fe.forEach(t),c.forEach(t),$e=f(e),se=s(e,"P",{});var yi=r(se);ya=l(yi,"Having my app on SvelteKit also comes with some other potential benefits. If I ever want to bring in another developer, it will be much easier to get them up to speed with SvelteKit than my own custom framework. And for the same reason, if I ever want to sell my app I imagine it will be an easier sell that it\u2019s built on something well-supported and documented. Of course, this would be true for any well-known framework, but as I mentioned earlier I really love Svelte and dislike React so for me it\u2019s an easy choice."),yi.forEach(t),et=f(e),le=s(e,"P",{});var bi=r(le);ba=l(bi,"Overall, I\u2019m really happy with SvelteKit and want to extend my sincere thanks for the SvelteKit team for working so hard on it, taking our feedback, and sharing it with us for free. It really is amazing."),bi.forEach(t),tt=f(e),_=s(e,"P",{});var lt=r(_);ka=l(lt,"I love it so much, in fact, that I'm taking what I've learned in my own app and developing a "),re=s(lt,"A",{href:!0});var ki=r(re);ga=l(ki,"SvelteKit SaaS starter template"),ki.forEach(t),Ia=l(lt,"."),lt.forEach(t),this.h()},h(){document.title="Reflections on Migrating my SaaS to SvelteKit",H(E,"padding","0"),m(O,"href","https://extensionpay.com"),m(C,"href","https://svelte.dev/"),m(z,"href","https://svelte.dev/blog/announcing-sveltekit-1.0"),m(B,"href","https://kit.svelte.dev"),H(P,"width","645px"),_a(P.src,Ka=""+(me+"/articles/migrate-saas-sveltekit/lines_of_code_before.png"))||m(P,"src",Ka),m(P,"alt","Screenshot of cloc showing 4975 lines of code total"),m(J,"href",""+(me+"/articles/migrate-saas-sveltekit/lines_of_code_before.png")),H(A,"width","645px"),H(L,"width","647px"),_a(L.src,Aa=""+(me+"/articles/migrate-saas-sveltekit/lines_of_code_after.png"))||m(L,"src",Aa),m(L,"alt","Screenshot of cloc output showing 4397 lines of code total"),m(U,"href",""+(me+"/articles/migrate-saas-sveltekit/lines_of_code_after.png")),H(x,"width","647px"),_a(R.src,Pa=""+(me+"/articles/migrate-saas-sveltekit/performance.png"))||m(R,"src",Pa),H(R,"width","815px"),m(R,"alt","Plot of CPU performance over time. On April 2 there is a black vertical line indicating the time the new SvelteKit was deployed."),m(Q,"href",""+(me+"/articles/migrate-saas-sveltekit/performance.png")),H(j,"width","815px"),m(te,"href","https://github.com/sveltejs/kit/issues/9096"),m(ie,"href","https://kit.svelte.dev/docs/form-actions"),m(oe,"href","https://kit.svelte.dev/docs/form-actions#progressive-enhancement"),m(re,"href","https://sveltekitsaas.com")},m(e,n){d(e,M,n),d(e,E,n),a(E,ue),a(ue,rt),d(e,xe,n),d(e,g,n),a(g,nt),a(g,O),a(O,dt),a(g,ht),d(e,Le,n),d(e,I,n),a(I,ft),a(I,C),a(C,mt),a(I,ut),d(e,je,n),d(e,S,n),a(S,pt),a(S,z),a(z,ct),a(S,wt),d(e,Re,n),d(e,K,n),a(K,B),a(B,vt),a(K,yt),d(e,Te,n),d(e,N,n),a(N,bt),d(e,He,n),d(e,F,n),a(F,kt),d(e,Me,n),d(e,w,n),a(w,gt),a(w,pe),a(pe,It),a(w,St),a(w,ce),a(ce,_t),a(w,Et),d(e,Oe,n),d(e,D,n),a(D,Kt),d(e,Ce,n),d(e,A,n),a(A,J),a(J,P),d(e,ze,n),d(e,G,n),a(G,At),d(e,Be,n),d(e,x,n),a(x,U),a(U,L),d(e,Ne,n),d(e,q,n),a(q,Pt),d(e,Fe,n),d(e,W,n),a(W,xt),d(e,De,n),d(e,X,n),a(X,Lt),d(e,Je,n),d(e,j,n),a(j,Q),a(Q,R),d(e,Ge,n),d(e,V,n),a(V,jt),d(e,Ue,n),d(e,v,n),a(v,Rt),a(v,we),a(we,Tt),a(v,Ht),a(v,ve),a(ve,Mt),a(v,Ot),d(e,qe,n),d(e,Y,n),a(Y,Ct),d(e,We,n),d(e,Z,n),a(Z,zt),d(e,Xe,n),d(e,$,n),a($,Bt),d(e,Qe,n),d(e,ee,n),a(ee,Nt),d(e,Ve,n),d(e,p,n),a(p,ye),a(ye,Ft),a(p,Dt),a(p,be),a(be,Jt),a(p,Gt),a(p,b),a(b,Ut),a(b,ke),a(ke,qt),a(b,Wt),a(b,te),a(te,Xt),a(b,Qt),a(p,Vt),a(p,ge),a(ge,Yt),a(p,Zt),a(p,T),a(T,$t),a(T,Ie),a(Ie,ea),a(T,ta),d(e,Ye,n),d(e,ae,n),a(ae,aa),d(e,Ze,n),d(e,u,n),a(u,Se),a(Se,ia),a(u,oa),a(u,_e),a(_e,sa),a(u,la),a(u,Ee),a(Ee,ra),a(u,na),a(u,Ke),a(Ke,da),a(u,ha),a(u,Ae),a(Ae,fa),a(u,ma),a(u,k),a(k,ua),a(k,ie),a(ie,pa),a(k,ca),a(k,Pe),a(Pe,oe),a(oe,wa),a(k,va),d(e,$e,n),d(e,se,n),a(se,ya),d(e,et,n),d(e,le,n),a(le,ba),d(e,tt,n),d(e,_,n),a(_,ka),a(_,re),a(re,ga),a(_,Ia)},p:Ea,i:Ea,o:Ea,d(e){e&&t(M),e&&t(E),e&&t(xe),e&&t(g),e&&t(Le),e&&t(I),e&&t(je),e&&t(S),e&&t(Re),e&&t(K),e&&t(Te),e&&t(N),e&&t(He),e&&t(F),e&&t(Me),e&&t(w),e&&t(Oe),e&&t(D),e&&t(Ce),e&&t(A),e&&t(ze),e&&t(G),e&&t(Be),e&&t(x),e&&t(Ne),e&&t(q),e&&t(Fe),e&&t(W),e&&t(De),e&&t(X),e&&t(Je),e&&t(j),e&&t(Ge),e&&t(V),e&&t(Ue),e&&t(v),e&&t(qe),e&&t(Y),e&&t(We),e&&t(Z),e&&t(Xe),e&&t($),e&&t(Qe),e&&t(ee),e&&t(Ve),e&&t(p),e&&t(Ye),e&&t(ae),e&&t(Ze),e&&t(u),e&&t($e),e&&t(se),e&&t(et),e&&t(le),e&&t(tt),e&&t(_)}}}class xi extends Ii{constructor(M){super();Si(this,M,null,Ki,_i,{})}}export{xi as default};
